server {
        listen       7480;
        server_name  178.172.195.18;

        #charset koi8-r;

        access_log  /home/user/node.js-project/nginx_logs/access.log;
        error_log  /home/user/node.js-project/nginx_logs/access.log; # в какой файл и в каком формате (error, встроенный) логгируются ошибки

        gzip on; # включить сжатие ответов
        gzip_disable "msie6"; # если клиент - IE6, не сжимать ответы (он глючит)
        gzip_min_length 512; # ответы длиной менее 512 байт не сжимать (это малоэффективно)
        gzip_buffers 4 8k; # размеры внутренних буферов, используемых для сжатия (обычно менять не нужно)
        # файлы с какими mime-типами сжимать
        # тут нет например gif/png/jpeg/zip - они сами по себе уже сжатые, их сжатие - потеря времени
        # тут нет text/html - он включён в этот список по умолчанию, указывать не надо
        gzip_types text/plain text/xml application/xml text/css application/x-javascript application/javascript application/json text/javascript; 
        gzip_comp_level 9; # степень сжатия от 1 до 9, чем больше степень - тем меньше ответ но тем больше ресурсов процессора тратится на сжатие


        location ~ \.(css|js|jpe?g)$ {
            root /home/user/node.js-project/public;
            expires 1h;
        }

        location / { # обращения к любым УРЛам, содержащим "/" (а то есть к любым вообще)
            proxy_pass http://localhost:7481;

            # включаем сжатие вообще
            gzip on;
            gzip_disable "msie6";
            gzip_min_length 512;
            gzip_buffers 4 8k;
            # gzip_types не задаём - этот бэкенд возвращает ответ только с типом text/html, а он сжимается по умолчанию
            gzip_comp_level 9;

            gzip_proxied any; # nginx будет ответ, полученный от Express, сжимать перед отправкой клиенту

            proxy_cache_lock on; # если на бэкенд такой УРЛ сейчас уже проксируется в рамках другого запроса, не проксировать ещё один, а дождаться ответа другого
            proxy_cache PROXYCACHE; # использовать кэш проксированных ответов с таким именем
            # proxy_cache_methods GET HEAD POST; по умолчанию GET HEAD, нам достаточно, но очень важно что если мы знаем что делаем, то можно кэшировать и ответы на POST-запросы!
            # proxy_cache_key позволяет задать ключ кэша, значение по умолчанию нас устраивает; его можно переустановить если мы скажем понимаем что от наличия GET-параметров проксированный ответ всё равно не зависит
            proxy_cache_valid 5m; # кэшировать на 1 минуту

            # при любых проблемах с бэкендом - возвращает он ошибку, или нет с ним связи и т.д. - разрешаем использовать прокисшую запись из кэша
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504; 

            add_header X-Cached $upstream_cache_status; # добавляем заголовок ответа клиенту, чтобы мы видели, взят ответ из кэша или нет
        }

        location ~ /get-edit-page-data {
            proxy_pass http://localhost:7481;

            # включаем сжатие вообще
            gzip on;
            gzip_disable "msie6";
            gzip_min_length 512;
            gzip_buffers 4 8k;
            # gzip_types не задаём - этот бэкенд возвращает ответ только с типом text/html, а он сжимается по умолчанию
            gzip_comp_level 9;

            gzip_proxied any; # nginx будет ответ, полученный от Express, сжимать перед отправкой клиенту   
        }
    }